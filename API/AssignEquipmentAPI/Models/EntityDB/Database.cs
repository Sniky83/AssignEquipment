// Licence file C:\Users\lherve\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace API.Models.EntityDB
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<AffectationEquipement> AffectationEquipements { get; set; } // AffectationEquipements
        DbSet<Collaborateur> Collaborateurs { get; set; } // Collaborateurs
        DbSet<Equipement> Equipements { get; set; } // Equipements
        DbSet<Fonction> Fonctions { get; set; } // Fonctions
        DbSet<Group> Groups { get; set; } // Groups
        DbSet<TypeEquipement> TypeEquipements { get; set; } // TypeEquipements

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<AffectationEquipement> AffectationEquipements { get; set; } // AffectationEquipements
        public DbSet<Collaborateur> Collaborateurs { get; set; } // Collaborateurs
        public DbSet<Equipement> Equipements { get; set; } // Equipements
        public DbSet<Fonction> Fonctions { get; set; } // Fonctions
        public DbSet<Group> Groups { get; set; } // Groups
        public DbSet<TypeEquipement> TypeEquipements { get; set; } // TypeEquipements

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=.;Initial Catalog=AssignEquipment;Integrated Security=True;MultipleActiveResultSets=True");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new AffectationEquipementConfiguration());
            modelBuilder.ApplyConfiguration(new CollaborateurConfiguration());
            modelBuilder.ApplyConfiguration(new EquipementConfiguration());
            modelBuilder.ApplyConfiguration(new FonctionConfiguration());
            modelBuilder.ApplyConfiguration(new GroupConfiguration());
            modelBuilder.ApplyConfiguration(new TypeEquipementConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<AffectationEquipement> AffectationEquipements { get; set; } // AffectationEquipements
        public DbSet<Collaborateur> Collaborateurs { get; set; } // Collaborateurs
        public DbSet<Equipement> Equipements { get; set; } // Equipements
        public DbSet<Fonction> Fonctions { get; set; } // Fonctions
        public DbSet<Group> Groups { get; set; } // Groups
        public DbSet<TypeEquipement> TypeEquipements { get; set; } // TypeEquipements

        public FakeMyDbContext()
        {
            _database = new FakeDatabaseFacade(new MyDbContext());

            AffectationEquipements = new FakeDbSet<AffectationEquipement>("IdAffectationEquipement");
            Collaborateurs = new FakeDbSet<Collaborateur>("IdCollaborateur");
            Equipements = new FakeDbSet<Equipement>("IdEquipement");
            Fonctions = new FakeDbSet<Fonction>("IdFonction");
            Groups = new FakeDbSet<Group>("IdGroup");
            TypeEquipements = new FakeDbSet<TypeEquipement>("IdTypeEquipement");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }

    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> :
        DbSet<TEntity>,
        IQueryable<TEntity>,
        IAsyncEnumerable<TEntity>,
        IListSource,
        IResettableService
        where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private ObservableCollection<TEntity> _data;
        private IQueryable _query;
        public override IEntityType EntityType { get; }

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity)));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray();        RemoveRange(array);
            AddRange(array);
        }

        bool IListSource.ContainsListCollection => true;

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public override IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

        public void ResetState()
        {
            _data  = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Task ResetStateAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.Factory.StartNew(() => ResetState());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override Task CommitTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override void RollbackTransaction()
        {
        }

        public override Task RollbackTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public Guid TransactionId => Guid.NewGuid();
        public void Commit() { }
        public void Rollback() { }
        public Task CommitAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public Task RollbackAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public void Dispose() { }
        public ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // AffectationEquipements
    public class AffectationEquipement
    {
        public int IdAffectationEquipement { get; set; } // id_affectation_equipement (Primary key)
        public int IdEquipement { get; set; } // id_equipement
        public int IdCollaborateur { get; set; } // id_collaborateur
        public bool IsActif { get; set; } // is_actif
        public DateTime DateCreation { get; set; } // date_creation

        // Foreign keys

        /// <summary>
        /// Parent Collaborateur pointed by [AffectationEquipements].([IdCollaborateur]) (FK__Affectati__id_co__33D4B598)
        /// </summary>
        public virtual Collaborateur Collaborateur { get; set; } // FK__Affectati__id_co__33D4B598

        /// <summary>
        /// Parent Equipement pointed by [AffectationEquipements].([IdEquipement]) (FK__Affectati__id_eq__32E0915F)
        /// </summary>
        public virtual Equipement Equipement { get; set; } // FK__Affectati__id_eq__32E0915F
    }

    // Collaborateurs
    public class Collaborateur
    {
        public int IdCollaborateur { get; set; } // id_collaborateur (Primary key)
        public int IdFonction { get; set; } // id_fonction
        public int IdGroup { get; set; } // id_group
        public bool IsActif { get; set; } // is_actif
        public string Nom { get; set; } // nom (length: 25)
        public string Prenom { get; set; } // prenom (length: 25)
        public string Uname { get; set; } // uname (length: 50)
        public string Pwd { get; set; } // pwd (length: 64)
        public DateTime DateCreation { get; set; } // date_creation

        // Reverse navigation

        /// <summary>
        /// Child AffectationEquipements where [AffectationEquipements].[id_collaborateur] point to this entity (FK__Affectati__id_co__33D4B598)
        /// </summary>
        public virtual ICollection<AffectationEquipement> AffectationEquipements { get; set; } // AffectationEquipements.FK__Affectati__id_co__33D4B598

        // Foreign keys

        /// <summary>
        /// Parent Fonction pointed by [Collaborateurs].([IdFonction]) (FK__Collabora__id_fo__29572725)
        /// </summary>
        public virtual Fonction Fonction { get; set; } // FK__Collabora__id_fo__29572725

        /// <summary>
        /// Parent Group pointed by [Collaborateurs].([IdGroup]) (FK__Collabora__id_gr__2A4B4B5E)
        /// </summary>
        public virtual Group Group { get; set; } // FK__Collabora__id_gr__2A4B4B5E

        public Collaborateur()
        {
            AffectationEquipements = new List<AffectationEquipement>();
        }
    }

    // Equipements
    public class Equipement
    {
        public int IdEquipement { get; set; } // id_equipement (Primary key)
        public int IdTypeEquipement { get; set; } // id_type_equipement
        public string Marque { get; set; } // marque (length: 25)
        public string Modele { get; set; } // modele (length: 25)
        public string NumeroSerie { get; set; } // numero_serie (length: 50)
        public string Commentaire { get; set; } // commentaire (length: 255)
        public DateTime DateCreation { get; set; } // date_creation

        // Reverse navigation

        /// <summary>
        /// Child AffectationEquipements where [AffectationEquipements].[id_equipement] point to this entity (FK__Affectati__id_eq__32E0915F)
        /// </summary>
        public virtual ICollection<AffectationEquipement> AffectationEquipements { get; set; } // AffectationEquipements.FK__Affectati__id_eq__32E0915F

        // Foreign keys

        /// <summary>
        /// Parent TypeEquipement pointed by [Equipements].([IdTypeEquipement]) (FK__Equipemen__id_ty__300424B4)
        /// </summary>
        public virtual TypeEquipement TypeEquipement { get; set; } // FK__Equipemen__id_ty__300424B4

        public Equipement()
        {
            AffectationEquipements = new List<AffectationEquipement>();
        }
    }

    // Fonctions
    public class Fonction
    {
        public int IdFonction { get; set; } // id_fonction (Primary key)
        public string Libelle { get; set; } // libelle (length: 25)

        // Reverse navigation

        /// <summary>
        /// Child Collaborateurs where [Collaborateurs].[id_fonction] point to this entity (FK__Collabora__id_fo__29572725)
        /// </summary>
        public virtual ICollection<Collaborateur> Collaborateurs { get; set; } // Collaborateurs.FK__Collabora__id_fo__29572725

        public Fonction()
        {
            Collaborateurs = new List<Collaborateur>();
        }
    }

    // Groups
    public class Group
    {
        public int IdGroup { get; set; } // id_group (Primary key)
        public string Libelle { get; set; } // libelle (length: 25)

        // Reverse navigation

        /// <summary>
        /// Child Collaborateurs where [Collaborateurs].[id_group] point to this entity (FK__Collabora__id_gr__2A4B4B5E)
        /// </summary>
        public virtual ICollection<Collaborateur> Collaborateurs { get; set; } // Collaborateurs.FK__Collabora__id_gr__2A4B4B5E

        public Group()
        {
            Collaborateurs = new List<Collaborateur>();
        }
    }

    // TypeEquipements
    public class TypeEquipement
    {
        public int IdTypeEquipement { get; set; } // id_type_equipement (Primary key)
        public bool IsActif { get; set; } // is_actif
        public string Libelle { get; set; } // libelle (length: 25)

        // Reverse navigation

        /// <summary>
        /// Child Equipements where [Equipements].[id_type_equipement] point to this entity (FK__Equipemen__id_ty__300424B4)
        /// </summary>
        public virtual ICollection<Equipement> Equipements { get; set; } // Equipements.FK__Equipemen__id_ty__300424B4

        public TypeEquipement()
        {
            Equipements = new List<Equipement>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // AffectationEquipements
    public class AffectationEquipementConfiguration : IEntityTypeConfiguration<AffectationEquipement>
    {
        public void Configure(EntityTypeBuilder<AffectationEquipement> builder)
        {
            builder.ToTable("AffectationEquipements", "dbo");
            builder.HasKey(x => x.IdAffectationEquipement).HasName("PK__Affectat__2D4F4526B52921AD").IsClustered();

            builder.Property(x => x.IdAffectationEquipement).HasColumnName(@"id_affectation_equipement").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdEquipement).HasColumnName(@"id_equipement").HasColumnType("int").IsRequired();
            builder.Property(x => x.IdCollaborateur).HasColumnName(@"id_collaborateur").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActif).HasColumnName(@"is_actif").HasColumnType("bit").IsRequired();
            builder.Property(x => x.DateCreation).HasColumnName(@"date_creation").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Collaborateur).WithMany(b => b.AffectationEquipements).HasForeignKey(c => c.IdCollaborateur).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Affectati__id_co__33D4B598");
            builder.HasOne(a => a.Equipement).WithMany(b => b.AffectationEquipements).HasForeignKey(c => c.IdEquipement).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Affectati__id_eq__32E0915F");
        }
    }

    // Collaborateurs
    public class CollaborateurConfiguration : IEntityTypeConfiguration<Collaborateur>
    {
        public void Configure(EntityTypeBuilder<Collaborateur> builder)
        {
            builder.ToTable("Collaborateurs", "dbo");
            builder.HasKey(x => x.IdCollaborateur).HasName("PK__Collabor__6BF9219EA87AF8E0").IsClustered();

            builder.Property(x => x.IdCollaborateur).HasColumnName(@"id_collaborateur").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdFonction).HasColumnName(@"id_fonction").HasColumnType("int").IsRequired();
            builder.Property(x => x.IdGroup).HasColumnName(@"id_group").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActif).HasColumnName(@"is_actif").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Nom).HasColumnName(@"nom").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.Prenom).HasColumnName(@"prenom").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.Uname).HasColumnName(@"uname").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Pwd).HasColumnName(@"pwd").HasColumnType("varchar(64)").IsRequired().IsUnicode(false).HasMaxLength(64);
            builder.Property(x => x.DateCreation).HasColumnName(@"date_creation").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Fonction).WithMany(b => b.Collaborateurs).HasForeignKey(c => c.IdFonction).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Collabora__id_fo__29572725");
            builder.HasOne(a => a.Group).WithMany(b => b.Collaborateurs).HasForeignKey(c => c.IdGroup).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Collabora__id_gr__2A4B4B5E");

            builder.HasIndex(x => x.Uname).HasDatabaseName("UQ__Collabor__C7D2484E912AED7B").IsUnique();
        }
    }

    // Equipements
    public class EquipementConfiguration : IEntityTypeConfiguration<Equipement>
    {
        public void Configure(EntityTypeBuilder<Equipement> builder)
        {
            builder.ToTable("Equipements", "dbo");
            builder.HasKey(x => x.IdEquipement).HasName("PK__Equipeme__32ACD92271DB68B9").IsClustered();

            builder.Property(x => x.IdEquipement).HasColumnName(@"id_equipement").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdTypeEquipement).HasColumnName(@"id_type_equipement").HasColumnType("int").IsRequired();
            builder.Property(x => x.Marque).HasColumnName(@"marque").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.Modele).HasColumnName(@"modele").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.NumeroSerie).HasColumnName(@"numero_serie").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Commentaire).HasColumnName(@"commentaire").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DateCreation).HasColumnName(@"date_creation").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.TypeEquipement).WithMany(b => b.Equipements).HasForeignKey(c => c.IdTypeEquipement).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Equipemen__id_ty__300424B4");
        }
    }

    // Fonctions
    public class FonctionConfiguration : IEntityTypeConfiguration<Fonction>
    {
        public void Configure(EntityTypeBuilder<Fonction> builder)
        {
            builder.ToTable("Fonctions", "dbo");
            builder.HasKey(x => x.IdFonction).HasName("PK__Fonction__E9D07590185F8F12").IsClustered();

            builder.Property(x => x.IdFonction).HasColumnName(@"id_fonction").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Libelle).HasColumnName(@"libelle").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
        }
    }

    // Groups
    public class GroupConfiguration : IEntityTypeConfiguration<Group>
    {
        public void Configure(EntityTypeBuilder<Group> builder)
        {
            builder.ToTable("Groups", "dbo");
            builder.HasKey(x => x.IdGroup).HasName("PK__Groups__8BE8BA1B230D7BBD").IsClustered();

            builder.Property(x => x.IdGroup).HasColumnName(@"id_group").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Libelle).HasColumnName(@"libelle").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);
        }
    }

    // TypeEquipements
    public class TypeEquipementConfiguration : IEntityTypeConfiguration<TypeEquipement>
    {
        public void Configure(EntityTypeBuilder<TypeEquipement> builder)
        {
            builder.ToTable("TypeEquipements", "dbo");
            builder.HasKey(x => x.IdTypeEquipement).HasName("PK__TypeEqui__CBE66FE5BE777AF4").IsClustered();

            builder.Property(x => x.IdTypeEquipement).HasColumnName(@"id_type_equipement").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IsActif).HasColumnName(@"is_actif").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Libelle).HasColumnName(@"libelle").HasColumnType("varchar(25)").IsRequired().IsUnicode(false).HasMaxLength(25);

            builder.HasIndex(x => x.Libelle).HasDatabaseName("UQ__TypeEqui__DB6DF8858E6F2819").IsUnique();
        }
    }


    #endregion

}
// </auto-generated>
